<?xml version="1.0"?>
<!--
  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License. See accompanying LICENSE file.
-->

<configuration>
    <property>
        <name>yarn.resourcemanager.hostname</name>
        <value>namenode</value>
        <description>
            The hostname of the RM.
            Default: 0.0.0.0
        </description>
    </property>
    <property>
        <name>yarn.resourcemanager.nodemanager-connect-retries</name>
        <value>1000</value>
        <description>
            Retry times to connect with NM.
            Default: 10
        </description>
    </property>
    <property>
        <name>yarn.resourcemanager.bind-host</name>
        <value>0.0.0.0</value>
        <description>
            The actual address the server will bind to. If this optional address is set, the RPC and
            webapp servers will bind to this address and the port specified in yarn.resourcemanager.address
            and yarn.resourcemanager.webapp.address, respectively. This is most useful for making RM listen
            to all interfaces by setting to 0.0.0.0.
        </description>
    </property>
    <property>
        <name>yarn.nodemanager.bind-host</name>
        <value>0.0.0.0</value>
        <description>
            The actual address the server will bind to. If this optional address is set, the RPC and webapp
            servers will bind to this address and the port specified in yarn.nodemanager.address and
            yarn.nodemanager.webapp.address, respectively. This is most useful for making NM listen to all
            interfaces by setting to 0.0.0.0.
        </description>
    </property>
    <property>
        <name>yarn.nodemanager.vmem-check-enabled</name>
        <value>false</value>
        <description>
            Whether virtual memory limits will be enforced for containers.
            Default: true
        </description>
    </property>
    <property>
        <name>yarn.nodemanager.pmem-check-enabled</name>
        <value>false</value>
        <description>
            Whether physical memory limits will be enforced for containers.
            Default: true
        </description>
    </property>
    <property>
        <name>yarn.application.classpath</name>
        <value>$HADOOP_CONF_DIR,$HADOOP_COMMON_HOME/share/hadoop/common/*,$HADOOP_COMMON_HOME/share/hadoop/common/lib/*,$HADOOP_HDFS_HOME/share/hadoop/hdfs/*,$HADOOP_HDFS_HOME/share/hadoop/hdfs/lib/*,$HADOOP_YARN_HOME/share/hadoop/yarn/*,$HADOOP_YARN_HOME/share/hadoop/yarn/lib/*</value>
    </property>

    <!-- autogenerated by Cloudera
    <property>
        <name>yarn.acl.enable</name>
        <value>false</value>
        <description>
            Are acls enabled.
            Default: false (Cloudera: true)
        </description>
    </property>
    <property>
        <name>yarn.admin.acl</name>
        <value>*</value>
        <description>
            ACL of who can be admin of the YARN cluster.
            Default: * (Cloudera: *)
        </description>
    </property>
    -->

    <!-- autogenerated by Cloudera
    <property>
        <name>yarn.resourcemanager.address</name>
        <value>${yarn.resourcemanager.hostname}:8032</value>
    </property>
    <property>
        <name>yarn.resourcemanager.admin.address</name>
        <value>${yarn.resourcemanager.hostname}:8033</value>
    </property>
    <property>
        <name>yarn.resourcemanager.scheduler.address</name>
        <value>${yarn.resourcemanager.hostname}:8030</value>
    </property>
    <property>
        <name>yarn.resourcemanager.resource-tracker.address</name>
        <value>${yarn.resourcemanager.hostname}:8031</value>
    </property>
    <property>
        <name>yarn.resourcemanager.webapp.address</name>
        <value>${yarn.resourcemanager.hostname}:8088</value>
    </property>
    <property>
        <name>yarn.resourcemanager.webapp.https.address</name>
        <value>${yarn.resourcemanager.hostname}:8090</value>
  </property>
    -->

    <!-- autogenerated by Cloudera
    <property>
        <name>yarn.resourcemanager.client.thread-count</name>
        <value>50</value>
        <description>
            The number of threads used to handle applications manager requests.
            Default: 50 (Cloudera: 50)
        </description>
    </property>
    <property>
        <name>yarn.resourcemanager.scheduler.client.thread-count</name>
        <value>50</value>
        <description>
            Number of threads to handle scheduler interface.
            Default: 50 (Cloudera: 50)
        </description>
    </property>
    <property>
        <name>yarn.resourcemanager.admin.client.thread-count</name>
        <value>1</value>
        <description>
            Number of threads used to handle RM admin interface.
            Default: 1 (Cloudera: 1)
        </description>
    </property>
    -->

    <!-- autogenerated by Cloudera
    <property>
        <name>yarn.resourcemanager.amliveliness-monitor.interval-ms</name>
        <value>1000</value>
    </property>
    <property>
        <name>yarn.am.liveness-monitor.expiry-interval-ms</name>
        <value>600000</value>
    </property>
    <property>
        <name>yarn.resourcemanager.am.max-attempts</name>
        <value>2</value>
    </property>
    <property>
        <name>yarn.resourcemanager.container.liveness-monitor.interval-ms</name>
        <value>600000</value>
    </property>
    <property>
        <name>yarn.resourcemanager.nm.liveness-monitor.interval-ms</name>
        <value>1000</value>
    </property>
    <property>
        <name>yarn.nm.liveness-monitor.expiry-interval-ms</name>
        <value>600000</value>
    </property>
    <property>
        <name>yarn.resourcemanager.resource-tracker.client.thread-count</name>
        <value>50</value>
    </property>
    -->

    <property>
        <name>yarn.nodemanager.resource.memory-mb</name>
        <value>-1</value>
        <description>
            Amount of physical memory, in MB, that can be allocated for containers.
            If set to -1 and yarn.nodemanager.resource.detect-hardware-capabilities is true,
            it is automatically calculated (in case of Windows and Linux). In other cases,
            the default is 8192MB.
            Default: -1  (32768)
        </description>
    </property>
    <property>
        <name>yarn.nodemanager.resource.detect-hardware-capabilities</name>
        <value>true</value>
        <description>
            Enable auto-detection of node capabilities such as memory and CPU.
            Default: false
        </description>
    </property>
    <property>
        <name>yarn.scheduler.minimum-allocation-mb</name>
        <value>1024</value>
        <description>
            The minimum allocation for every container request at the RM, in MBs.
            Memory requests lower than this will throw a InvalidResourceRequestException.
            Default: 1024
        </description>
    </property>
    <property>
        <name>yarn.scheduler.increment-allocation-mb</name>
        <value>512</value>
        <description>
            Not found in yarn-defaults.xml
            Default: ? (1024, Cloudera: 512)
        </description>
    </property>
    <property>
        <name>yarn.scheduler.maximum-allocation-mb</name>
        <value>457728</value>
        <description>
            The maximum allocation for every container request at the RM, in MBs.
            Memory requests higher than this will throw a InvalidResourceRequestException.
            Default: 8192 (8192, Cloudera: 94790)
        </description>
    </property>
    <property>
        <name>yarn.scheduler.minimum-allocation-vcores</name>
        <value>1</value>
        <description>
            The minimum allocation for every container request at the RM, in terms of virtual CPU cores.
            Requests lower than this will throw a InvalidResourceRequestException.
            Default: 1
        </description>
    </property>
    <property>
        <name>yarn.scheduler.increment-allocation-vcores</name>
        <value>1</value>
        <description>
            Not found in yarn-defaults.xml
        </description>
    </property>
    <property>
        <name>yarn.scheduler.maximum-allocation-vcores</name>
        <value>32</value>
        <description>
            The maximum allocation for every container request at the RM, in terms of virtual CPU cores.
            Requests higher than this will throw a InvalidResourceRequestException.
            Default: 4 (Cloudera: 16)
        </description>
    </property>

    <property>
        <name>yarn.nodemanager.aux-services</name>
        <value>spark_shuffle,mapreduce_shuffle</value>
    </property>
    <property>
        <name>yarn.nodemanager.aux-services.spark_shuffle.class</name>
        <value>org.apache.spark.network.yarn.YarnShuffleService</value>
    </property>
    <property>
        <name>yarn.nodemanager.aux-services.mapreduce_shuffle.class</name>
        <value>org.apache.hadoop.mapred.ShuffleHandler</value>
    </property>

    <!-- autogenerated by Cloudera
    <property>
        <name>yarn.resourcemanager.scheduler.class</name>
        <value>org.apache.hadoop.yarn.server.resourcemanager.scheduler.fair.FairScheduler</value>
        <description>
            The class to use as the resource scheduler.
            Default: org.apache.hadoop.yarn.server.resourcemanager.scheduler.capacity.CapacityScheduler
            Cloudera: org.apache.hadoop.yarn.server.resourcemanager.scheduler.fair.FairScheduler
        </description>
    </property>
    <property>
        <name>yarn.resourcemanager.max-completed-applications</name>
        <value>10000</value>
        <description>
            The maximum number of completed applications RM keeps.
            Default: 10000
        </description>
    </property>
    <property>
        <name>yarn.nodemanager.remote-app-log-dir</name>
        <value>/tmp/logs</value>
        <description>
            Where to aggregate logs to.
            Default: /tmp/logs
        </description>
    </property>
    <property>
        <name>yarn.nodemanager.remote-app-log-dir-suffix</name>
        <value>logs</value>
        <description>
            he remote log dir will be created at {yarn.nodemanager.remote-app-log-dir}/${user}/{thisParam}
            Default: logs
        </description>
    </property>
    -->
</configuration>
